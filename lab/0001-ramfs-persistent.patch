diff --git a/fs/ramfs/Makefile b/fs/ramfs/Makefile
index d1198adb5..7a372e94a 100644
--- a/fs/ramfs/Makefile
+++ b/fs/ramfs/Makefile
@@ -7,4 +7,4 @@ obj-y += ramfs.o
 
 file-mmu-y := file-nommu.o
 file-mmu-$(CONFIG_MMU) := file-mmu.o
-ramfs-objs += inode.o $(file-mmu-y)
+ramfs-objs += inode.o $(file-mmu-y) persist.o
diff --git a/fs/ramfs/file-mmu.c b/fs/ramfs/file-mmu.c
index 12af04903..012e16484 100644
--- a/fs/ramfs/file-mmu.c
+++ b/fs/ramfs/file-mmu.c
@@ -42,7 +42,7 @@ const struct file_operations ramfs_file_operations = {
 	.read_iter	= generic_file_read_iter,
 	.write_iter	= generic_file_write_iter,
 	.mmap		= generic_file_mmap,
-	.fsync		= noop_fsync,
+	.fsync		= ramfs_persistent_fsync,
 	.splice_read	= generic_file_splice_read,
 	.splice_write	= iter_file_splice_write,
 	.llseek		= generic_file_llseek,
diff --git a/fs/ramfs/file-nommu.c b/fs/ramfs/file-nommu.c
index ba3525ccc..5a7c6aeb2 100644
--- a/fs/ramfs/file-nommu.c
+++ b/fs/ramfs/file-nommu.c
@@ -42,7 +42,7 @@ const struct file_operations ramfs_file_operations = {
 	.get_unmapped_area	= ramfs_nommu_get_unmapped_area,
 	.read_iter		= generic_file_read_iter,
 	.write_iter		= generic_file_write_iter,
-	.fsync			= noop_fsync,
+	.fsync			= ramfs_persistent_fsync,
 	.splice_read		= generic_file_splice_read,
 	.splice_write		= iter_file_splice_write,
 	.llseek			= generic_file_llseek,
diff --git a/fs/ramfs/inode.c b/fs/ramfs/inode.c
index bc66d0173..cdf284c1f 100644
--- a/fs/ramfs/inode.c
+++ b/fs/ramfs/inode.c
@@ -41,13 +41,7 @@
 #include <linux/seq_file.h>
 #include "internal.h"
 
-struct ramfs_mount_opts {
-	umode_t mode;
-};
 
-struct ramfs_fs_info {
-	struct ramfs_mount_opts mount_opts;
-};
 
 #define RAMFS_DEFAULT_MODE	0755
 
@@ -175,32 +169,42 @@ static const struct inode_operations ramfs_dir_inode_operations = {
  */
 static int ramfs_show_options(struct seq_file *m, struct dentry *root)
 {
-	struct ramfs_fs_info *fsi = root->d_sb->s_fs_info;
+	struct ramfs_sb_info *fsi = root->d_sb->s_fs_info;
 
 	if (fsi->mount_opts.mode != RAMFS_DEFAULT_MODE)
 		seq_printf(m, ",mode=%o", fsi->mount_opts.mode);
+	if (fsi->mount_opts.sync_dir)
+		seq_printf(m, ",sync_dir=%s", fsi->mount_opts.sync_dir);
 	return 0;
 }
 
+static void ramfs_put_super(struct super_block *sb)
+{
+	ramfs_cleanup_persistence(sb);
+}
+
 static const struct super_operations ramfs_ops = {
 	.statfs		= simple_statfs,
 	.drop_inode	= generic_delete_inode,
 	.show_options	= ramfs_show_options,
+	.put_super	= ramfs_put_super,
 };
 
 enum ramfs_param {
 	Opt_mode,
+	Opt_sync_dir,
 };
 
 const struct fs_parameter_spec ramfs_fs_parameters[] = {
 	fsparam_u32oct("mode",	Opt_mode),
+	fsparam_string("sync_dir", Opt_sync_dir),
 	{}
 };
 
 static int ramfs_parse_param(struct fs_context *fc, struct fs_parameter *param)
 {
 	struct fs_parse_result result;
-	struct ramfs_fs_info *fsi = fc->s_fs_info;
+	struct ramfs_sb_info *fsi = fc->s_fs_info;
 	int opt;
 
 	opt = fs_parse(fc, ramfs_fs_parameters, param, &result);
@@ -223,6 +227,12 @@ static int ramfs_parse_param(struct fs_context *fc, struct fs_parameter *param)
 	case Opt_mode:
 		fsi->mount_opts.mode = result.uint_32 & S_IALLUGO;
 		break;
+	case Opt_sync_dir:
+		kfree(fsi->mount_opts.sync_dir);
+		fsi->mount_opts.sync_dir = kstrdup(param->string, GFP_KERNEL);
+		if (!fsi->mount_opts.sync_dir)
+			return -ENOMEM;
+		break;
 	}
 
 	return 0;
@@ -230,8 +240,9 @@ static int ramfs_parse_param(struct fs_context *fc, struct fs_parameter *param)
 
 static int ramfs_fill_super(struct super_block *sb, struct fs_context *fc)
 {
-	struct ramfs_fs_info *fsi = sb->s_fs_info;
+	struct ramfs_sb_info *fsi = sb->s_fs_info;
 	struct inode *inode;
+	int err;
 
 	sb->s_maxbytes		= MAX_LFS_FILESIZE;
 	sb->s_blocksize		= PAGE_SIZE;
@@ -240,10 +251,19 @@ static int ramfs_fill_super(struct super_block *sb, struct fs_context *fc)
 	sb->s_op		= &ramfs_ops;
 	sb->s_time_gran		= 1;
 
+	/* Setup persistence if sync_dir is specified */
+	if (fsi->mount_opts.sync_dir) {
+		err = ramfs_setup_persistence(sb, fsi->mount_opts.sync_dir);
+		if (err) {
+			return err;
+		}
+	}
+
 	inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi->mount_opts.mode, 0);
 	sb->s_root = d_make_root(inode);
-	if (!sb->s_root)
+	if (!sb->s_root) {
 		return -ENOMEM;
+	}
 
 	return 0;
 }
@@ -255,7 +275,12 @@ static int ramfs_get_tree(struct fs_context *fc)
 
 static void ramfs_free_fc(struct fs_context *fc)
 {
-	kfree(fc->s_fs_info);
+	struct ramfs_sb_info *fsi = fc->s_fs_info;
+
+	if (fsi) {
+		kfree(fsi->mount_opts.sync_dir);
+		kfree(fsi);
+	}
 }
 
 static const struct fs_context_operations ramfs_context_ops = {
@@ -266,13 +291,20 @@ static const struct fs_context_operations ramfs_context_ops = {
 
 int ramfs_init_fs_context(struct fs_context *fc)
 {
-	struct ramfs_fs_info *fsi;
+	struct ramfs_sb_info *fsi;
 
 	fsi = kzalloc(sizeof(*fsi), GFP_KERNEL);
 	if (!fsi)
 		return -ENOMEM;
 
 	fsi->mount_opts.mode = RAMFS_DEFAULT_MODE;
+	fsi->mount_opts.sync_dir = NULL;
+
+	/* Initialize persistence info to clean state */
+	fsi->persist_info.persistence_enabled = false;
+	fsi->persist_info.sync_dir_path = NULL;
+	fsi->persist_info.sync_dir_dentry = NULL;
+
 	fc->s_fs_info = fsi;
 	fc->ops = &ramfs_context_ops;
 	return 0;
@@ -280,8 +312,15 @@ int ramfs_init_fs_context(struct fs_context *fc)
 
 static void ramfs_kill_sb(struct super_block *sb)
 {
-	kfree(sb->s_fs_info);
+	struct ramfs_sb_info *fsi = sb->s_fs_info;
+
+	/* Let kill_litter_super handle the cleanup via put_super */
 	kill_litter_super(sb);
+
+	if (fsi) {
+		kfree(fsi->mount_opts.sync_dir);
+		kfree(fsi);
+	}
 }
 
 static struct file_system_type ramfs_fs_type = {
diff --git a/fs/ramfs/internal.h b/fs/ramfs/internal.h
index 3257fc180..5f31d830f 100644
--- a/fs/ramfs/internal.h
+++ b/fs/ramfs/internal.h
@@ -5,5 +5,33 @@
  * Written by David Howells (dhowells@redhat.com)
  */
 
+#include <linux/fs.h>
+#include <linux/mutex.h>
 
 extern const struct inode_operations ramfs_file_inode_operations;
+
+/* RAMfs mount options */
+struct ramfs_mount_opts {
+	umode_t mode;
+	char *sync_dir;
+};
+
+/* Persistent RAMfs structures */
+struct ramfs_persist_info {
+	char *sync_dir_path;	/* Path to sync directory */
+	struct dentry *sync_dir_dentry; /* Sync directory dentry */
+	struct mutex sync_mutex; /* Synchronization mutex for persistence */
+	bool persistence_enabled; /* Whether persistence is enabled */
+};
+
+/* Extended RAMfs superblock info */
+struct ramfs_sb_info {
+	struct ramfs_persist_info persist_info;
+	struct ramfs_mount_opts mount_opts;
+};
+
+/* Function declarations for persistence */
+extern int ramfs_persistent_fsync(struct file *file, loff_t start, loff_t end, int datasync);
+extern int ramfs_setup_persistence(struct super_block *sb, const char *sync_dir);
+extern void ramfs_cleanup_persistence(struct super_block *sb);
+extern int ramfs_atomic_write_to_sync_dir(struct file *file);
diff --git a/fs/ramfs/persist.c b/fs/ramfs/persist.c
new file mode 100644
index 000000000..35de803a1
--- /dev/null
+++ b/fs/ramfs/persist.c
@@ -0,0 +1,454 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/* persist.c: RAMfs persistence support
+ *
+ * Adds persistence support to RAMfs by synchronously writing to a
+ * configured sync directory on flush operations.
+ */
+
+#include <linux/fs.h>
+#include <linux/file.h>
+#include <linux/slab.h>
+#include <linux/path.h>
+#include <linux/namei.h>
+#include <linux/uaccess.h>
+#include <linux/buffer_head.h>
+#include <linux/pagemap.h>
+#include <linux/writeback.h>
+#include <linux/atomic.h>
+#include <linux/string.h>
+#include <linux/uuid.h>
+#include <linux/random.h>
+
+#include "internal.h"
+
+static atomic_t ramfs_temp_counter = ATOMIC_INIT(0);
+
+/*
+ * Get the persistent backing file path for a ramfs file
+ */
+static char *ramfs_get_persistent_path(struct file *file)
+{
+	struct super_block *sb = file_inode(file)->i_sb;
+	struct ramfs_sb_info *fsi = sb->s_fs_info;
+	struct dentry *dentry = file->f_path.dentry;
+	char *path_buf, *full_path, *dentry_path;
+	int len;
+
+	if (!fsi->persist_info.persistence_enabled) {
+		return NULL;
+	}
+
+	/* Allocate buffer for path construction */
+	path_buf = kmalloc(PATH_MAX, GFP_KERNEL);
+	if (!path_buf) {
+		printk(KERN_ERR "ramfs_get_persistent_path: failed to allocate path_buf\n");
+		return NULL;
+	}
+
+	full_path = kmalloc(PATH_MAX, GFP_KERNEL);
+	if (!full_path) {
+		printk(KERN_ERR "ramfs_get_persistent_path: failed to allocate full_path\n");
+		kfree(path_buf);
+		return NULL;
+	}
+
+	/* Get relative path from ramfs root */
+	dentry_path = dentry_path_raw(dentry, path_buf, PATH_MAX);
+	if (IS_ERR(dentry_path)) {
+		printk(KERN_ERR "ramfs_get_persistent_path: dentry_path_raw failed: %ld\n", PTR_ERR(dentry_path));
+		kfree(path_buf);
+		kfree(full_path);
+		return NULL;
+	}
+
+	/* Construct full path: sync_dir + relative_path */
+	len = snprintf(full_path, PATH_MAX, "%s%s",
+		       fsi->persist_info.sync_dir_path, dentry_path);
+
+	kfree(path_buf);
+
+	if (len >= PATH_MAX) {
+		printk(KERN_ERR "ramfs_get_persistent_path: path too long: %d\n", len);
+		kfree(full_path);
+		return NULL;
+	}
+
+	return full_path;
+}
+
+/*
+ * Create directory structure for persistent file if needed
+ */
+static int ramfs_create_persistent_dir(const char *filepath)
+{
+	char *dir_path, *p, *parent_dir;
+	struct path path, parent_path;
+	struct dentry *dentry;
+	struct inode *parent_inode;
+	int err = 0;
+
+	dir_path = kzalloc(strlen(filepath) + 1, GFP_KERNEL);
+	if (!dir_path)
+		return -ENOMEM;
+
+	strcpy(dir_path, filepath);
+
+	/* Find the last '/' and truncate to get directory path */
+	p = strrchr(dir_path, '/');
+	if (p && p != dir_path) {
+		*p = '\0';
+
+		/* Check if directory exists */
+		err = kern_path(dir_path, LOOKUP_DIRECTORY, &path);
+		if (err) {
+			/* Directory doesn't exist, try to create it */
+
+			/* Get parent directory */
+			parent_dir = strrchr(dir_path, '/');
+			if (parent_dir) {
+				*parent_dir = '\0';
+				parent_dir++;
+
+				err = kern_path(dir_path, LOOKUP_DIRECTORY, &parent_path);
+				if (err) {
+					printk(KERN_ERR "ramfs: parent directory '%s' doesn't exist\n", dir_path);
+					goto out;
+				}
+
+				parent_inode = d_inode(parent_path.dentry);
+
+				/* Create the directory */
+				inode_lock(parent_inode);
+				dentry = lookup_one_len(parent_dir, parent_path.dentry, strlen(parent_dir));
+				if (!IS_ERR(dentry)) {
+					err = vfs_mkdir(&init_user_ns, parent_inode, dentry, 0755);
+					if (err && err != -EEXIST) {
+						printk(KERN_ERR "ramfs: failed to create directory '%s': %d\n", parent_dir, err);
+					} else {
+						err = 0;
+					}
+					dput(dentry);
+				} else {
+					err = PTR_ERR(dentry);
+				}
+				inode_unlock(parent_inode);
+
+				path_put(&parent_path);
+			} else {
+				printk(KERN_ERR "ramfs: cannot determine parent directory for '%s'\n", dir_path);
+				err = -EINVAL;
+			}
+		} else {
+			path_put(&path);
+			err = 0;
+		}
+	}
+
+out:
+	kfree(dir_path);
+	return err;
+}
+
+/*
+ * Atomically write ramfs file content to persistent storage
+ */
+int ramfs_atomic_write_to_sync_dir(struct file *file)
+{
+	struct inode *inode = file_inode(file);
+	struct super_block *sb = inode->i_sb;
+	struct ramfs_sb_info *fsi = sb->s_fs_info;
+	char *persistent_path = NULL;
+	char *temp_path = NULL;
+	struct file *temp_file = NULL;
+	loff_t file_size, pos = 0;
+	ssize_t bytes_written = 0;
+	int err = 0;
+	struct page *page;
+	void *page_addr;
+	loff_t index;
+	char temp_suffix[32];
+	unsigned int temp_id;
+
+	if (!fsi->persist_info.persistence_enabled) {
+		return 0;
+	}
+
+	mutex_lock(&fsi->persist_info.sync_mutex);
+
+	/* Get persistent file path */
+	persistent_path = ramfs_get_persistent_path(file);
+	if (!persistent_path) {
+		printk(KERN_ERR "ramfs_atomic_write_to_sync_dir: failed to get persistent path\n");
+		err = -ENOMEM;
+		goto out_unlock;
+	}
+
+	/* Create temporary file path for atomic write */
+	temp_id = atomic_inc_return(&ramfs_temp_counter);
+	snprintf(temp_suffix, sizeof(temp_suffix), ".ramfs_tmp_%u_%lu",
+		 temp_id, jiffies);
+
+	temp_path = kmalloc(strlen(persistent_path) + strlen(temp_suffix) + 1,
+			    GFP_KERNEL);
+	if (!temp_path) {
+		printk(KERN_ERR "ramfs_atomic_write_to_sync_dir: failed to allocate temp_path\n");
+		err = -ENOMEM;
+		goto out_unlock;
+	}
+	strcpy(temp_path, persistent_path);
+	strcat(temp_path, temp_suffix);
+
+	/* Create directory structure if needed */
+	err = ramfs_create_persistent_dir(persistent_path);
+	if (err && err != -EEXIST)
+		goto out_unlock;
+
+	/* Open temporary file for writing */
+	temp_file = filp_open(temp_path, O_WRONLY | O_CREAT | O_TRUNC, 0644);
+	if (IS_ERR(temp_file)) {
+		err = PTR_ERR(temp_file);
+		printk(KERN_ERR "ramfs_atomic_write_to_sync_dir: filp_open failed with error %d\n", err);
+		temp_file = NULL;
+		goto out_unlock;
+	}
+
+	/* Get file size */
+	file_size = i_size_read(inode);
+
+	/* Copy data from ramfs pages to persistent file */
+	for (index = 0; index < (file_size + PAGE_SIZE - 1) >> PAGE_SHIFT; index++) {
+		page = find_get_page(inode->i_mapping, index);
+		if (!page) {
+			continue;
+		}
+
+		if (!PageUptodate(page)) {
+			put_page(page);
+			continue;
+		}
+
+		page_addr = kmap_atomic(page);
+
+		/* Write page content to temp file */
+		bytes_written = kernel_write(temp_file, page_addr,
+					   min((loff_t)PAGE_SIZE, file_size - pos),
+					   &pos);
+
+		kunmap_atomic(page_addr);
+		put_page(page);
+
+		if (bytes_written < 0) {
+			printk(KERN_ERR "ramfs_atomic_write_to_sync_dir: kernel_write failed with %zd\n", bytes_written);
+			err = bytes_written;
+			goto out_cleanup;
+		}
+	}
+
+	/* Force sync to disk */
+	err = vfs_fsync(temp_file, 0);
+	if (err) {
+		printk(KERN_ERR "ramfs_atomic_write_to_sync_dir: vfs_fsync failed with %d\n", err);
+		goto out_cleanup;
+	}
+
+	/* Close temp file */
+	filp_close(temp_file, NULL);
+	temp_file = NULL;
+
+	/* Atomically move temp file to final location using vfs_rename */
+	{
+		struct path temp_path_struct, persistent_path_struct;
+		struct dentry *temp_dentry, *persistent_dentry;
+		struct inode *temp_dir, *persistent_dir;
+
+		err = kern_path(temp_path, 0, &temp_path_struct);
+		if (err) {
+			printk(KERN_ERR "ramfs_atomic_write_to_sync_dir: kern_path for temp_path failed: %d\n", err);
+			goto out_cleanup;
+		}
+
+		/* Get the parent directory of the target file */
+		{
+			char *parent_dir_path = kzalloc(strlen(persistent_path) + 1, GFP_KERNEL);
+			char *last_slash;
+
+			if (!parent_dir_path) {
+				err = -ENOMEM;
+				path_put(&temp_path_struct);
+				goto out_cleanup;
+			}
+
+			strcpy(parent_dir_path, persistent_path);
+			last_slash = strrchr(parent_dir_path, '/');
+			if (last_slash && last_slash != parent_dir_path) {
+				*last_slash = '\0';
+			}
+
+			err = kern_path(parent_dir_path, LOOKUP_DIRECTORY, &persistent_path_struct);
+			if (err) {
+				printk(KERN_ERR "ramfs_atomic_write_to_sync_dir: kern_path for parent directory failed: %d\n", err);
+				kfree(parent_dir_path);
+				path_put(&temp_path_struct);
+				goto out_cleanup;
+			}
+
+			kfree(parent_dir_path);
+		}
+
+		temp_dentry = temp_path_struct.dentry;
+		temp_dir = d_inode(temp_dentry->d_parent);
+		persistent_dir = d_inode(persistent_path_struct.dentry);
+
+		/* Create the target dentry - just the filename part */
+		{
+			const char *filename = strrchr(persistent_path, '/') + 1;
+
+			/* Lock the parent directory before calling lookup_one_len */
+			inode_lock(persistent_dir);
+			persistent_dentry = lookup_one_len(filename,
+							   persistent_path_struct.dentry,
+							   strlen(filename));
+			inode_unlock(persistent_dir);
+		}
+
+		if (!IS_ERR(persistent_dentry)) {
+			struct renamedata rd;
+			rd.old_mnt_userns = &init_user_ns;
+			rd.old_dir = temp_dir;
+			rd.old_dentry = temp_dentry;
+			rd.new_mnt_userns = &init_user_ns;
+			rd.new_dir = persistent_dir;
+			rd.new_dentry = persistent_dentry;
+			err = vfs_rename(&rd);
+			dput(persistent_dentry);
+		} else {
+			err = PTR_ERR(persistent_dentry);
+			printk(KERN_ERR "ramfs_atomic_write_to_sync_dir: lookup_one_len failed: %d\n", err);
+		}
+
+		path_put(&temp_path_struct);
+		path_put(&persistent_path_struct);
+	}
+
+out_cleanup:
+	if (temp_file) {
+		filp_close(temp_file, NULL);
+		/* Remove temp file on error */
+		if (err) {
+			struct path temp_path_struct;
+			if (!kern_path(temp_path, 0, &temp_path_struct)) {
+				vfs_unlink(&init_user_ns,
+					   d_inode(temp_path_struct.dentry->d_parent),
+					   temp_path_struct.dentry, NULL);
+				path_put(&temp_path_struct);
+			}
+		}
+	}
+
+out_unlock:
+	mutex_unlock(&fsi->persist_info.sync_mutex);
+	kfree(persistent_path);
+	kfree(temp_path);
+	return err;
+}
+
+/*
+ * Persistent fsync implementation
+ */
+int ramfs_persistent_fsync(struct file *file, loff_t start, loff_t end, int datasync)
+{
+	struct inode *inode = file_inode(file);
+	struct super_block *sb = inode->i_sb;
+	struct ramfs_sb_info *fsi = sb->s_fs_info;
+	int err;
+
+	if (!fsi->persist_info.persistence_enabled) {
+		return 0;
+	}
+
+	/* First ensure all pages are up to date */
+	err = file_write_and_wait_range(file, start, end);
+	if (err) {
+		printk(KERN_ERR "ramfs_persistent_fsync: file_write_and_wait_range failed: %d\n", err);
+		return err;
+	}
+
+	/* Write to persistent storage */
+	err = ramfs_atomic_write_to_sync_dir(file);
+
+	return err;
+}
+
+/*
+ * Setup persistence for RAMfs
+ */
+int ramfs_setup_persistence(struct super_block *sb, const char *sync_dir)
+{
+	struct ramfs_sb_info *fsi = sb->s_fs_info;
+	struct path path;
+	int err;
+
+	if (!sync_dir || strlen(sync_dir) == 0) {
+		return 0;
+	}
+
+	/* Verify sync directory exists and is accessible */
+	err = kern_path(sync_dir, LOOKUP_DIRECTORY, &path);
+	if (err) {
+		printk(KERN_ERR "ramfs: sync directory '%s' not accessible: %d\n",
+		       sync_dir, err);
+		return err;
+	}
+
+	/* Check if we have write permissions */
+	err = inode_permission(&init_user_ns, d_inode(path.dentry), MAY_WRITE);
+	if (err) {
+		printk(KERN_ERR "ramfs: no write permission to sync directory '%s'\n",
+		       sync_dir);
+		path_put(&path);
+		return err;
+	}
+
+	/* Setup persistence info - we don't need to hold the dentry reference */
+	fsi->persist_info.sync_dir_path = kstrdup(sync_dir, GFP_KERNEL);
+	if (!fsi->persist_info.sync_dir_path) {
+		path_put(&path);
+		return -ENOMEM;
+	}
+
+	/* We don't need to hold onto the dentry reference */
+	fsi->persist_info.sync_dir_dentry = NULL;
+	mutex_init(&fsi->persist_info.sync_mutex);
+	fsi->persist_info.persistence_enabled = true;
+
+	path_put(&path);
+
+	return 0;
+}
+
+/*
+ * Cleanup persistence resources
+ */
+void ramfs_cleanup_persistence(struct super_block *sb)
+{
+	struct ramfs_sb_info *fsi = sb->s_fs_info;
+
+	if (!fsi) {
+		return;
+	}
+
+	if (fsi->persist_info.persistence_enabled) {
+		if (fsi->persist_info.sync_dir_path) {
+			kfree(fsi->persist_info.sync_dir_path);
+			fsi->persist_info.sync_dir_path = NULL;
+		}
+
+		/* We no longer hold a dentry reference, so no need to dput */
+		fsi->persist_info.sync_dir_dentry = NULL;
+
+		/* Destroy the mutex */
+		mutex_destroy(&fsi->persist_info.sync_mutex);
+
+		fsi->persist_info.persistence_enabled = false;
+	}
+}
\ No newline at end of file
